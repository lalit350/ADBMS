Name: Lalit Pal
Roll No.: L007
MSc Data Science and AI
Practical 6: Indexing using MongoDB


Microsoft Windows [Version 10.0.22631.3296]
(c) Microsoft Corporation. All rights reserved.

C:\Users\LALIT>mongosh
Current Mongosh Log ID: 660d6d134de1c70c68217b7a
Connecting to:          mongodb://127.0.0.1:27017/?directConnection=true&serverSelectionTimeoutMS=2000&appName=mongosh+2.1.5
Using MongoDB:          7.0.5
Using Mongosh:          2.1.5
mongosh 2.2.0 is available for download: https://www.mongodb.com/try/download/shell

For mongosh info see: https://docs.mongodb.com/mongodb-shell/

------
   The server generated these startup warnings when booting
   2024-03-30T07:53:16.851+05:30: Access control is not enabled for the database. Read and write access to data and configuration is unrestricted
------

test> use LalitIndexing;
switched to db LalitIndexing
ApekshaIndexing> db.bankdataIndexing.find({Location:'Bhuj'}).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'LalitIndexing.bankdataIndexing',
    indexFilterSet: false,
    parsedQuery: { Location: { '$eq': 'Bhuj' } },
    queryHash: '9770E4A2',
    planCacheKey: '9770E4A2',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'COLLSCAN',
      filter: { Location: { '$eq': 'Bhuj' } },
      direction: 'forward'
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 22027,
    executionTimeMillis: 880,
    totalKeysExamined: 0,
    totalDocsExamined: 1004480,
    executionStages: {
      stage: 'COLLSCAN',
      filter: { Location: { '$eq': 'Bhuj' } },
      nReturned: 22027,
      executionTimeMillisEstimate: 36,
      works: 1004481,
      advanced: 22027,
      needTime: 982453,
      needYield: 0,
      saveState: 1004,
      restoreState: 1004,
      isEOF: 1,
      direction: 'forward',
      docsExamined: 1004480
    }
  },
  command: {
    find: 'bankdataIndexing',
    filter: { Location: 'Bhuj' },
    '$db': 'ApekshaIndexing'
  },
  serverInfo: {
    host: 'LAPTOP-2CUT5A84',
    port: 27017,
    version: '7.0.5',
    gitVersion: '7809d71e84e314b497f282ea8aa06d7ded3eb205'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted'
  },
  ok: 1
}
LalitIndexing> db.bankdataIndexing.createIndex({Location:1})
Location_1
LalitIndexing> db.bankdataIndexing.find({Location:'Bhuj'}).explain("executionStats")
{
  explainVersion: '1',
  queryPlanner: {
    namespace: 'ApekshaIndexing.bankdataIndexing',
    indexFilterSet: false,
    parsedQuery: { Location: { '$eq': 'Bhuj' } },
    queryHash: '9770E4A2',
    planCacheKey: '264C0465',
    maxIndexedOrSolutionsReached: false,
    maxIndexedAndSolutionsReached: false,
    maxScansToExplodeReached: false,
    winningPlan: {
      stage: 'FETCH',
      inputStage: {
        stage: 'IXSCAN',
        keyPattern: { Location: 1 },
        indexName: 'Location_1',
        isMultiKey: false,
        multiKeyPaths: { Location: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { Location: [ '["Bhuj", "Bhuj"]' ] }
      }
    },
    rejectedPlans: []
  },
  executionStats: {
    executionSuccess: true,
    nReturned: 22027,
    executionTimeMillis: 79,
    totalKeysExamined: 22027,
    totalDocsExamined: 22027,
    executionStages: {
      stage: 'FETCH',
      nReturned: 22027,
      executionTimeMillisEstimate: 27,
      works: 22028,
      advanced: 22027,
      needTime: 0,
      needYield: 0,
      saveState: 22,
      restoreState: 22,
      isEOF: 1,
      docsExamined: 22027,
      alreadyHasObj: 0,
      inputStage: {
        stage: 'IXSCAN',
        nReturned: 22027,
        executionTimeMillisEstimate: 23,
        works: 22028,
        advanced: 22027,
        needTime: 0,
        needYield: 0,
        saveState: 22,
        restoreState: 22,
        isEOF: 1,
        keyPattern: { Location: 1 },
        indexName: 'Location_1',
        isMultiKey: false,
        multiKeyPaths: { Location: [] },
        isUnique: false,
        isSparse: false,
        isPartial: false,
        indexVersion: 2,
        direction: 'forward',
        indexBounds: { Location: [ '["Bhuj", "Bhuj"]' ] },
        keysExamined: 22027,
        seeks: 1,
        dupsTested: 0,
        dupsDropped: 0
      }
    }
  },
  command: {
    find: 'bankdataIndexing',
    filter: { Location: 'Bhuj' },
    '$db': 'ApekshaIndexing'
  },
  serverInfo: {
    host: 'LAPTOP-2CUT5A84',
    port: 27017,
    version: '7.0.5',
    gitVersion: '7809d71e84e314b497f282ea8aa06d7ded3eb205'
  },
  serverParameters: {
    internalQueryFacetBufferSizeBytes: 104857600,
    internalQueryFacetMaxOutputDocSizeBytes: 104857600,
    internalLookupStageIntermediateDocumentMaxSizeBytes: 104857600,
    internalDocumentSourceGroupMaxMemoryBytes: 104857600,
    internalQueryMaxBlockingSortMemoryUsageBytes: 104857600,
    internalQueryProhibitBlockingMergeOnMongoS: 0,
    internalQueryMaxAddToSetBytes: 104857600,
    internalDocumentSourceSetWindowFieldsMaxMemoryBytes: 104857600,
    internalQueryFrameworkControl: 'trySbeRestricted'
  },
  ok: 1
}
LalitIndexing> db.bankdataIndexing.getIndexes()
[
  { v: 2, key: { _id: 1 }, name: '_id_' },
  { v: 2, key: { Location: 1 }, name: 'Location_1' }
]
LalitIndexing> db.bankdataIndexing.dropIndex("Location_1")
{ nIndexesWas: 2, ok: 1 }
ApekshaIndexing> db.bankdataIndexing.dropIndexes()
{
  nIndexesWas: 1,
  msg: 'non-_id indexes dropped for collection',
  ok: 1
}
LalitIndexing>



